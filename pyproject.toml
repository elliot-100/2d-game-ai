[tool.poetry]
name = "two-d-game-ai"
version = "0.6.0"
description = ""
authors = ["elliot-100 <3186037+elliot-100@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11, <4"
# pydoclint dep docstring-parser-fork requires python < 4
pygame-ce = ">=2.5.0"

[tool.poetry.group.dev.dependencies]
invoke = "^2.0.0"
mypy = "^1.13.0"
pdoc = "^15.0.0"
pre-commit = "^4.0.1"
pydoclint = "^0.5.10"
pydoctest = "^0.2.1"
pytest = "^8.3.4"
ruff = "^0.8.2"

[tool.mypy]
## Config file:
warn_unused_configs = true
## Disallow dynamic typing:
## Disallow the use of the dynamic 'Any' type under certain conditions.
disallow_any_unimported = true  # additional to 'strict' config
disallow_any_generics = true
disallow_subclassing_any = true
## Untyped definitions and calls:
## Configure how untyped definitions and calls are handled.
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
## None and Optional handling:
## Adjust how values of type 'None' are handled.
no_implicit_optional = true  # additional to 'strict' config
## Configuring warnings:
## Detect code that is sound but redundant or problematic.
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true  # additional to 'strict' config
## Miscellaneous strictness flags:
no_implicit_reexport = true
strict_equality = true
extra_checks = true
##  Configuring error messages:
## Adjust the amount of detail shown in error messages.
show_error_codes = true  # additional to 'strict' config
pretty = true  # additional to 'strict' config

[tool.pydoclint]
style = 'numpy'
arg-type-hints-in-signature = true
arg-type-hints-in-docstring = false

[tool.ruff]
target-version = "py312"  # Not inferred from poetry-style pyproject.toml

[tool.ruff.lint]
select = ["ALL"]

ignore = [
# Rules that conflict with Ruff formatter:
"COM812",  # Trailing comma missing
"ISC001",  # Implicitly concatenated string literals on one line

# Other:
"ANN401",  # any-type [in function args]
# - Appropriate to use for *args, **kwargs
"D105",  # Missing docstring in magic method
"D205",  # 1 blank line required between summary line and description
"ERA001",  # Found commented-out code
"FIX002",  # Line contains TODO, consider resolving the issue
"TD002",  # Missing author in TODO
"TD003",  # Missing issue link on the line following this TODO
]

# Allow applying these 'unsafe' fixes without the `--unsafe-fixes` flag:
extend-safe-fixes = [
"TCH001",  # Move import into a type-checking block
"TCH003",  # Move standard library import into a type-checking block
"TCH004",  # Move import out of type-checking block
]

[tool.ruff.lint.per-file-ignores]
# Not relevant in tests:
"tests/*" = [
"PLR2004",  # Magic value used in comparison
"S101",  # Use of assert detected
"SLF001",  # Private member accessed
]

# Ignore rules for Invoke command-line tooling:
"tasks.py" = [
"ANN401",  # Dynamically typed expressions (typing.Any)
"T201",  # `print` found
]

# Ignore rules that conflict with Mypy:
"__init__.py" = [
"PLC0414",  # Import alias does not rename original package
]

## Special cases for top-level documentation:
"two_d_game_ai/__init__.py" = [
"D400",  # First line should end with a period
]

[tool.ruff.lint.pylint]
max-args = 7

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
