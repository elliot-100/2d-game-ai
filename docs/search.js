window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "two_d_game_ai", "modulename": "two_d_game_ai", "kind": "module", "doc": "<h1 id=\"architecture\">Architecture</h1>\n\n<p>The <code>World</code> (<code>two_d_game_ai.world.world.World</code>) is the simulated domain.</p>\n\n<ul>\n<li><code>World.grid</code> refers to a <code>Grid</code> (<code>two_d_game_ai.world.grid.Grid</code>), used for\npathfinding and line-of-sight.</li>\n</ul>\n\n<p><code>Bot</code>s are simulated agents/vehicles.</p>\n\n<ul>\n<li>They are aware of the <code>World</code>.</li>\n<li>They are not aware of the <code>World.grid</code>, but it does constrain their behaviour, e.g.\nwhen they query the <code>World</code> to find a route to a destination, intermediate waypoints\non the path are on grid nodes (cell centres).</li>\n</ul>\n\n<p><code>View</code> (<code>two_d_game_ai.view.view.View</code>) provides a visual user interface.</p>\n"}, {"fullname": "two_d_game_ai.SIMULATION_FPS", "modulename": "two_d_game_ai", "qualname": "SIMULATION_FPS", "kind": "variable", "doc": "<p>Simulation frames per second.\nViews could update faster or slower.</p>\n", "annotation": ": int", "default_value": "60"}, {"fullname": "two_d_game_ai.entities", "modulename": "two_d_game_ai.entities", "kind": "module", "doc": "<p>Package containing simulated entities within a <code>two_d_game_ai.world.World</code>.</p>\n"}, {"fullname": "two_d_game_ai.entities.bot", "modulename": "two_d_game_ai.entities.bot", "kind": "module", "doc": "<p>Package containing <code>Bot</code> class.</p>\n"}, {"fullname": "two_d_game_ai.entities.bot.Bot", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot", "kind": "class", "doc": "<p>Simulated agent/vehicle.</p>\n", "bases": "two_d_game_ai.entities.generic_entity.GenericEntity"}, {"fullname": "two_d_game_ai.entities.bot.Bot.__init__", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "two_d_game_ai.entities.bot.Bot.MAX_SPEED", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.MAX_SPEED", "kind": "variable", "doc": "<p>World units / second.</p>\n", "annotation": ": ClassVar[float]", "default_value": "60"}, {"fullname": "two_d_game_ai.entities.bot.Bot.MAX_ROTATION_RATE", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.MAX_ROTATION_RATE", "kind": "variable", "doc": "<p>Degrees / second.</p>\n", "annotation": ": ClassVar[float]", "default_value": "90"}, {"fullname": "two_d_game_ai.entities.bot.Bot.INITIAL_HEADING_DEGREES", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.INITIAL_HEADING_DEGREES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[float]", "default_value": "0"}, {"fullname": "two_d_game_ai.entities.bot.Bot.VISION_CONE_ANGLE", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.VISION_CONE_ANGLE", "kind": "variable", "doc": "<p>Degrees.</p>\n", "annotation": ": ClassVar[float]", "default_value": "90"}, {"fullname": "two_d_game_ai.entities.bot.Bot.velocity", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.velocity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pygame.math.Vector2"}, {"fullname": "two_d_game_ai.entities.bot.Bot.route", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.route", "kind": "variable", "doc": "<p>Waypoints to be visited.</p>\n", "annotation": ": list[pygame.math.Vector2]"}, {"fullname": "two_d_game_ai.entities.bot.Bot.heading", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.heading", "kind": "variable", "doc": "<p>Direction the <code>Bot</code> is facing.</p>\n", "annotation": ": two_d_game_ai.geometry.bearing.Bearing"}, {"fullname": "two_d_game_ai.entities.bot.Bot.known_bots", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.known_bots", "kind": "variable", "doc": "<p>Peers which are known about, but aren't currently in sight.</p>\n", "annotation": ": set[two_d_game_ai.entities.bot.Bot]"}, {"fullname": "two_d_game_ai.entities.bot.Bot.visible_bots", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.visible_bots", "kind": "variable", "doc": "<p>Peers which are currently in sight.</p>\n", "annotation": ": set[two_d_game_ai.entities.bot.Bot]"}, {"fullname": "two_d_game_ai.entities.bot.Bot.destination", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.destination", "kind": "variable", "doc": "<p>Destination point in World coordinates.</p>\n", "annotation": ": pygame.math.Vector2 | None"}, {"fullname": "two_d_game_ai.entities.bot.Bot.set_destination", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.set_destination", "kind": "function", "doc": "<p>Set destination point as pair of floats, avoiding <code>Vector2</code>.</p>\n\n<p>For use in example scripts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.max_rotation_step", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.max_rotation_step", "kind": "variable", "doc": "<p>Get maximum rotation, in degrees per simulation step.</p>\n", "annotation": ": float"}, {"fullname": "two_d_game_ai.entities.bot.Bot.update", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.update", "kind": "function", "doc": "<p>Update Bot, including move over 1 simulation step.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other_bots</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.is_at", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.is_at", "kind": "function", "doc": "<p>Get whether Bot is at location (True) or not (False).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.rotate", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.rotate", "kind": "function", "doc": "<p>Change Bot rotation over 1 simulation step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rotation_delta</strong>: Rotation in degrees</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rotation_delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.stop", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.stop", "kind": "function", "doc": "<p>Stop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.can_see", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.can_see", "kind": "function", "doc": "<p>Determine whether the Bot can see another Bot.</p>\n\n<p>Considers only the Bot vision cone angle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other_bot</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">Bot</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.can_see_point", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.can_see_point", "kind": "function", "doc": "<p>Determine whether the Bot can see a point.</p>\n\n<p>Considers only the Bot vision cone angle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.bot.Bot.route_to", "modulename": "two_d_game_ai.entities.bot", "qualname": "Bot.route_to", "kind": "function", "doc": "<p>Determine route to <code>goal</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[Vector2]</strong>: Locations on the path to <code>goal</code>, including <code>goal</code> itself.\nEmpty if no path found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.generic_entity", "modulename": "two_d_game_ai.entities.generic_entity", "kind": "module", "doc": "<p>Package containing <code>GenericEntity</code> class.</p>\n"}, {"fullname": "two_d_game_ai.entities.generic_entity.GenericEntity", "modulename": "two_d_game_ai.entities.generic_entity", "qualname": "GenericEntity", "kind": "class", "doc": "<p>Generic circular entity.</p>\n", "bases": "two_d_game_ai.entities.observer_pattern.Subject, abc.ABC"}, {"fullname": "two_d_game_ai.entities.generic_entity.GenericEntity.__init__", "modulename": "two_d_game_ai.entities.generic_entity", "qualname": "GenericEntity.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "two_d_game_ai.entities.generic_entity.GenericEntity.world", "modulename": "two_d_game_ai.entities.generic_entity", "qualname": "GenericEntity.world", "kind": "variable", "doc": "<p>Reference to <code>World</code> object.</p>\n"}, {"fullname": "two_d_game_ai.entities.generic_entity.GenericEntity.pos", "modulename": "two_d_game_ai.entities.generic_entity", "qualname": "GenericEntity.pos", "kind": "variable", "doc": "<p>Position in <code>World</code> coordinates, as <code>Vector2</code>.</p>\n"}, {"fullname": "two_d_game_ai.entities.generic_entity.GenericEntity.radius", "modulename": "two_d_game_ai.entities.generic_entity", "qualname": "GenericEntity.radius", "kind": "variable", "doc": "<p>Radius in <code>World</code> units. Default is 0.</p>\n"}, {"fullname": "two_d_game_ai.entities.movement_block", "modulename": "two_d_game_ai.entities.movement_block", "kind": "module", "doc": "<p>Package containing <code>MovementBlock</code> class.</p>\n"}, {"fullname": "two_d_game_ai.entities.movement_block.MovementBlock", "modulename": "two_d_game_ai.entities.movement_block", "qualname": "MovementBlock", "kind": "class", "doc": "<p>Circular entity that blocks movement.</p>\n", "bases": "two_d_game_ai.entities.generic_entity.GenericEntity"}, {"fullname": "two_d_game_ai.entities.movement_block.MovementBlock.__init__", "modulename": "two_d_game_ai.entities.movement_block", "qualname": "MovementBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "two_d_game_ai.entities.observer_pattern", "modulename": "two_d_game_ai.entities.observer_pattern", "kind": "module", "doc": "<p>Package implementing Observer pattern.</p>\n"}, {"fullname": "two_d_game_ai.entities.observer_pattern.ObserverException", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "ObserverException", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;Exception&#x27;&gt;"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject", "kind": "class", "doc": "<p>Subject (a.k.a. Observable) class.</p>\n\n<p>All simulated entity classes inherit from this class.</p>\n"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.__init__", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.name", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.observers", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.observers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": set[two_d_game_ai.entities.observer_pattern.Observer]"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.register_observer", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.register_observer", "kind": "function", "doc": "<p>Register an observer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observer</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">observer_pattern</span><span class=\"o\">.</span><span class=\"n\">Observer</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.unregister_observer", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.unregister_observer", "kind": "function", "doc": "<p>Unregister a observer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">observer</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">observer_pattern</span><span class=\"o\">.</span><span class=\"n\">Observer</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Subject.notify_observers", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Subject.notify_observers", "kind": "function", "doc": "<p>Send a message to all observers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Observer", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Observer", "kind": "class", "doc": "<p>Observer class.</p>\n\n<p>Viewers (e.g. renderers) inherit from this class.</p>\n"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Observer.__init__", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Observer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Observer.name", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Observer.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.entities.observer_pattern.Observer.report_event", "modulename": "two_d_game_ai.entities.observer_pattern", "qualname": "Observer.report_event", "kind": "function", "doc": "<p>Report the received message.</p>\n\n<p>Don't need to call this explicitly, it's called by Subject.dispatch().</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">observer_pattern</span><span class=\"o\">.</span><span class=\"n\">Subject</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.geometry", "modulename": "two_d_game_ai.geometry", "kind": "module", "doc": "<p>Package containing geometric classes and functions.</p>\n"}, {"fullname": "two_d_game_ai.geometry.CIRCLE_DEGREES", "modulename": "two_d_game_ai.geometry", "qualname": "CIRCLE_DEGREES", "kind": "variable", "doc": "<p></p>\n", "default_value": "360"}, {"fullname": "two_d_game_ai.geometry.Bearing", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing", "kind": "class", "doc": "<p>Represents a conventional bearing (aka azimuthal angle).</p>\n\n<p>Stored as a unit vector, based on Pygame's Vector2 class.</p>\n"}, {"fullname": "two_d_game_ai.geometry.Bearing.__init__", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_degrees</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "two_d_game_ai.geometry.Bearing.vector", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing.vector", "kind": "variable", "doc": "<p>The bearing as a standard (positive, right-handed, y-axis up) coordinate vector.</p>\n", "annotation": ": pygame.math.Vector2"}, {"fullname": "two_d_game_ai.geometry.Bearing.degrees", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing.degrees", "kind": "variable", "doc": "<p>Get bearing in degrees, positive clockwise from zero at North.</p>\n\n<p>0 &lt;= degrees &lt; 360.</p>\n\n<p>Intended for absolute bearings, where North is 0, East is 90, etc.</p>\n", "annotation": ": float"}, {"fullname": "two_d_game_ai.geometry.Bearing.degrees_normalised", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing.degrees_normalised", "kind": "variable", "doc": "<p>Get bearing in degrees, positive clockwise from zero at North.</p>\n\n<p>-180 &lt;= degrees &lt; 180, so due south is -180.</p>\n\n<p>Intended for relative bearings, where negative value is to left/port; positive\nis to right/starboard.</p>\n", "annotation": ": float"}, {"fullname": "two_d_game_ai.geometry.Bearing.relative", "modulename": "two_d_game_ai.geometry", "qualname": "Bearing.relative", "kind": "function", "doc": "<p>Return new <code>Bearing</code> representing relative bearing to vector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other_vector</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">bearing</span><span class=\"o\">.</span><span class=\"n\">Bearing</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view", "modulename": "two_d_game_ai.view", "kind": "module", "doc": "<p>Package implementing user interface in Pygame.</p>\n"}, {"fullname": "two_d_game_ai.view.bot_renderer", "modulename": "two_d_game_ai.view.bot_renderer", "kind": "module", "doc": "<p>Module containing <code>BotRenderer</code> class.</p>\n"}, {"fullname": "two_d_game_ai.view.bot_renderer.BotRenderer", "modulename": "two_d_game_ai.view.bot_renderer", "qualname": "BotRenderer", "kind": "class", "doc": "<p>Renders a Bot to a Surface.</p>\n", "bases": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer"}, {"fullname": "two_d_game_ai.view.bot_renderer.BotRenderer.ICON_RADIUS", "modulename": "two_d_game_ai.view.bot_renderer", "qualname": "BotRenderer.ICON_RADIUS", "kind": "variable", "doc": "<p>Display units.</p>\n", "annotation": ": ClassVar[int]", "default_value": "10"}, {"fullname": "two_d_game_ai.view.bot_renderer.BotRenderer.draw", "modulename": "two_d_game_ai.view.bot_renderer", "qualname": "BotRenderer.draw", "kind": "function", "doc": "<p>Draws the Bot and decorations to the surface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.colors", "modulename": "two_d_game_ai.view.colors", "kind": "module", "doc": "<p>Module containing colour definitions.</p>\n"}, {"fullname": "two_d_game_ai.view.colors.WINDOW_FILL", "modulename": "two_d_game_ai.view.colors", "qualname": "WINDOW_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(26, 26, 26, 255)"}, {"fullname": "two_d_game_ai.view.colors.WINDOW_TEXT", "modulename": "two_d_game_ai.view.colors", "qualname": "WINDOW_TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(204, 204, 204, 255)"}, {"fullname": "two_d_game_ai.view.colors.WORLD_FILL", "modulename": "two_d_game_ai.view.colors", "qualname": "WORLD_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(38, 38, 38, 255)"}, {"fullname": "two_d_game_ai.view.colors.WORLD_AXES_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "WORLD_AXES_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(64, 64, 64, 255)"}, {"fullname": "two_d_game_ai.view.colors.WORLD_GRID_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "WORLD_GRID_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(64, 64, 64, 255)"}, {"fullname": "two_d_game_ai.view.colors.MOVEMENT_BLOCK_FILL", "modulename": "two_d_game_ai.view.colors", "qualname": "MOVEMENT_BLOCK_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(26, 26, 26, 255)"}, {"fullname": "two_d_game_ai.view.colors.MOVEMENT_BLOCK_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "MOVEMENT_BLOCK_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(0, 0, 0, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_FILL", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(255, 255, 255, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_HEADING_INDICATOR_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_HEADING_INDICATOR_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(26, 26, 26, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_DESTINATION_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_DESTINATION_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(255, 255, 255, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_ROUTE_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_ROUTE_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(255, 165, 0, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_CAN_SEE_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_CAN_SEE_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(0, 238, 0, 255)"}, {"fullname": "two_d_game_ai.view.colors.BOT_KNOWS_LINE", "modulename": "two_d_game_ai.view.colors", "qualname": "BOT_KNOWS_LINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(30, 144, 255, 255)"}, {"fullname": "two_d_game_ai.view.colors.SELECTED_FILL", "modulename": "two_d_game_ai.view.colors", "qualname": "SELECTED_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(255, 255, 0, 255)"}, {"fullname": "two_d_game_ai.view.colors.DEBUG", "modulename": "two_d_game_ai.view.colors", "qualname": "DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(255, 0, 255, 255)"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer", "modulename": "two_d_game_ai.view.generic_entity_renderer", "kind": "module", "doc": "<p>Module containing <code>GenericEntityRenderer</code> class.</p>\n"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer", "kind": "class", "doc": "<p>Renders an entity to a Surface.</p>\n", "bases": "abc.ABC"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.LABEL_OFFSET", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.LABEL_OFFSET", "kind": "variable", "doc": "<p>Display units.</p>\n", "default_value": "(10, 10)"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.view", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.entity", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.entity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.font", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.is_selected", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.is_selected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.clickable_radius", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.clickable_radius", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.draw", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.draw", "kind": "function", "doc": "<p>Draw the entity to the surface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer.is_clicked", "modulename": "two_d_game_ai.view.generic_entity_renderer", "qualname": "GenericEntityRenderer.is_clicked", "kind": "function", "doc": "<p>Determine if the entity is clicked.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>click_pos</strong>: The position of the click in window coordinates.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the click position is within or on the clickable radius.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">click_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.movement_block_renderer", "modulename": "two_d_game_ai.view.movement_block_renderer", "kind": "module", "doc": "<p>Module containing <code>MovementBlockRenderer</code> class.</p>\n"}, {"fullname": "two_d_game_ai.view.movement_block_renderer.MovementBlockRenderer", "modulename": "two_d_game_ai.view.movement_block_renderer", "qualname": "MovementBlockRenderer", "kind": "class", "doc": "<p>Renders a Block to a Surface.</p>\n", "bases": "two_d_game_ai.view.generic_entity_renderer.GenericEntityRenderer"}, {"fullname": "two_d_game_ai.view.movement_block_renderer.MovementBlockRenderer.__init__", "modulename": "two_d_game_ai.view.movement_block_renderer", "qualname": "MovementBlockRenderer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"o\">.</span><span class=\"n\">movement_block</span><span class=\"o\">.</span><span class=\"n\">MovementBlock</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">Font</span></span>)</span>"}, {"fullname": "two_d_game_ai.view.movement_block_renderer.MovementBlockRenderer.draw", "modulename": "two_d_game_ai.view.movement_block_renderer", "qualname": "MovementBlockRenderer.draw", "kind": "function", "doc": "<p>Draws the MovementBlock to the surface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives", "modulename": "two_d_game_ai.view.primitives", "kind": "module", "doc": "<p>Module containing rendering primitives, wrapping <code>Pygame.draw</code> functions.</p>\n"}, {"fullname": "two_d_game_ai.view.primitives.draw_circle", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_circle", "kind": "function", "doc": "<p>Draw a circle on the <code>View</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives.draw_scaled_circle", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_scaled_circle", "kind": "function", "doc": "<p>Draw a circle on the <code>View</code>, in <code>World</code> units, which are scaled/translated for\ndisplay. Optionally supress radius scaling e.g. for icons whose size is independent\nof view scaling.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">scale_radius</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives.draw_scaled_circular_arc", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_scaled_circular_arc", "kind": "function", "doc": "<p>Draw a circular arc on the <code>View</code>, in <code>World</code> units,\nwhich are scaled/translated for display.</p>\n\n<p><code>width</code>: unscaled display units.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">start_angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">stop_angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives.draw_scaled_line", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_scaled_line", "kind": "function", "doc": "<p>Draw a line on the <code>View</code>, in <code>World</code> units,\nwhich are scaled/translated for display.</p>\n\n<p><code>width</code>: unscaled display units.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">start_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">end_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives.draw_scaled_rect", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_scaled_rect", "kind": "function", "doc": "<p>Draw a rectangle on the <code>View</code>, in <code>World</code> units,\nwhich are scaled/translated for display.</p>\n\n<p><code>width</code>: unscaled display units.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">Rect</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.primitives.draw_scaled_blit", "modulename": "two_d_game_ai.view.primitives", "qualname": "draw_scaled_blit", "kind": "function", "doc": "<p>Blit to the <code>View</code>.</p>\n\n<p><code>dest</code>: <code>World</code> units, which are scaled/translated for display.</p>\n\n<p><code>display_offset</code>: unscaled display units.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">View</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">dest</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">display_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.view", "modulename": "two_d_game_ai.view.view", "kind": "module", "doc": "<p>Module containing <code>View</code> class.</p>\n"}, {"fullname": "two_d_game_ai.view.view.View", "modulename": "two_d_game_ai.view.view", "qualname": "View", "kind": "class", "doc": "<p>Renders a <code>two_d_game_ai.world.world.World</code> to a window.</p>\n\n<p>NB: Unlike Pygame default, origin at centre, positive y upwards.</p>\n", "bases": "two_d_game_ai.entities.observer_pattern.Observer"}, {"fullname": "two_d_game_ai.view.view.View.__init__", "modulename": "two_d_game_ai.view.view", "qualname": "View.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scale_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "two_d_game_ai.view.view.View.FONT_SIZE", "modulename": "two_d_game_ai.view.view", "qualname": "View.FONT_SIZE", "kind": "variable", "doc": "<p>Base font size for all text.</p>\n", "annotation": ": ClassVar[int]", "default_value": "24"}, {"fullname": "two_d_game_ai.view.view.View.world", "modulename": "two_d_game_ai.view.view", "qualname": "View.world", "kind": "variable", "doc": "<p>The <code>World</code> to be rendered.</p>\n"}, {"fullname": "two_d_game_ai.view.view.View.scale_factor", "modulename": "two_d_game_ai.view.view", "qualname": "View.scale_factor", "kind": "variable", "doc": "<p>Scale factor applied to the <code>World</code>.</p>\n"}, {"fullname": "two_d_game_ai.view.view.View.window", "modulename": "two_d_game_ai.view.view", "qualname": "View.window", "kind": "variable", "doc": "<p>Top level Pygame <code>Surface</code>.</p>\n"}, {"fullname": "two_d_game_ai.view.view.View.running", "modulename": "two_d_game_ai.view.view", "qualname": "View.running", "kind": "variable", "doc": "<p>Flag to control e.g. input handling.</p>\n", "annotation": ": bool"}, {"fullname": "two_d_game_ai.view.view.View.handle_inputs", "modulename": "two_d_game_ai.view.view", "qualname": "View.handle_inputs", "kind": "function", "doc": "<p>Handle user inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.view.View.render", "modulename": "two_d_game_ai.view.view", "qualname": "View.render", "kind": "function", "doc": "<p>Render the <code>World</code> to the Pygame window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.view.view.View.to_display", "modulename": "two_d_game_ai.view.view", "qualname": "View.to_display", "kind": "function", "doc": "<p>Convert <code>World</code> coordinates to window coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>world_pos</strong>: <code>World</code> coordinates</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Vector2</strong>: Display window coordinates.\nOrigin is at centre, positive y upwards.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">world_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world", "modulename": "two_d_game_ai.world", "kind": "module", "doc": "<p>Module implementing the simulated domain.</p>\n"}, {"fullname": "two_d_game_ai.world.grid", "modulename": "two_d_game_ai.world.grid", "kind": "module", "doc": "<p>Module containing <code>Grid</code> class.</p>\n"}, {"fullname": "two_d_game_ai.world.grid.Grid", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid", "kind": "class", "doc": "<p>Grid class.</p>\n\n<p>NB: there is no 'Grid cell' class.</p>\n"}, {"fullname": "two_d_game_ai.world.grid.Grid.__init__", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "two_d_game_ai.world.grid.Grid.size", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.size", "kind": "variable", "doc": "<p><code>Grid</code> units per side.</p>\n"}, {"fullname": "two_d_game_ai.world.grid.Grid.untraversable_cells", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.untraversable_cells", "kind": "variable", "doc": "<p>Untraversable cells.</p>\n", "annotation": ": set[two_d_game_ai.world.grid_ref.GridRef]"}, {"fullname": "two_d_game_ai.world.grid.Grid.cells", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.cells", "kind": "variable", "doc": "<p>Return all cells..</p>\n", "annotation": ": set[two_d_game_ai.world.grid_ref.GridRef]"}, {"fullname": "two_d_game_ai.world.grid.Grid.reachable_neighbours", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.reachable_neighbours", "kind": "function", "doc": "<p>Return a cell's reachable neighbours.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.grid.Grid.is_traversable", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.is_traversable", "kind": "function", "doc": "<p>Determine whether a cell is traversable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.grid.Grid.route", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.route", "kind": "function", "doc": "<p>Determine a cell-based route between two cells.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[GridRef]</strong>: Cells on the path to <code>to_cell</code>, including <code>to_cell</code> itself.\nEmpty if no path found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_cell</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span>,</span><span class=\"param\">\t<span class=\"n\">to_cell</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.grid.Grid.cell_from_world_pos", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.cell_from_world_pos", "kind": "function", "doc": "<p>Return the <code>GridRef</code> of the cell containing <code>World</code> position.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.grid.Grid.cell_centre_to_world_pos", "modulename": "two_d_game_ai.world.grid", "qualname": "Grid.cell_centre_to_world_pos", "kind": "function", "doc": "<p>Return the <code>World</code> position of the centre of the cell.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid_ref</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span>,</span><span class=\"param\">\t<span class=\"n\">world</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">World</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.grid_ref", "modulename": "two_d_game_ai.world.grid_ref", "kind": "module", "doc": "<p>Module containing <code>GridRef</code> class.</p>\n"}, {"fullname": "two_d_game_ai.world.grid_ref.GridRef", "modulename": "two_d_game_ai.world.grid_ref", "qualname": "GridRef", "kind": "class", "doc": "<p>Grid reference class.</p>\n\n<p>NB: Not a <code>Grid</code> cell class.</p>\n"}, {"fullname": "two_d_game_ai.world.grid_ref.GridRef.__init__", "modulename": "two_d_game_ai.world.grid_ref", "qualname": "GridRef.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "two_d_game_ai.world.grid_ref.GridRef.x", "modulename": "two_d_game_ai.world.grid_ref", "qualname": "GridRef.x", "kind": "variable", "doc": "<p>x coordinate.</p>\n", "annotation": ": int"}, {"fullname": "two_d_game_ai.world.grid_ref.GridRef.y", "modulename": "two_d_game_ai.world.grid_ref", "qualname": "GridRef.y", "kind": "variable", "doc": "<p>y coordinate.</p>\n", "annotation": ": int"}, {"fullname": "two_d_game_ai.world.priority_queue", "modulename": "two_d_game_ai.world.priority_queue", "kind": "module", "doc": "<p>Module containing <code>PriorityQueue</code> class.</p>\n"}, {"fullname": "two_d_game_ai.world.priority_queue.PriorityQueue", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PriorityQueue", "kind": "class", "doc": "<p>Simple priority queue, using heapq.</p>\n\n<p>Specialised for holding locations.</p>\n"}, {"fullname": "two_d_game_ai.world.priority_queue.PriorityQueue.items", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PriorityQueue.items", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[two_d_game_ai.world.priority_queue.PrioritisedLocation]"}, {"fullname": "two_d_game_ai.world.priority_queue.PriorityQueue.is_empty", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PriorityQueue.is_empty", "kind": "variable", "doc": "<p>Check whether the queue is empty.</p>\n", "annotation": ": bool"}, {"fullname": "two_d_game_ai.world.priority_queue.PriorityQueue.put", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PriorityQueue.put", "kind": "function", "doc": "<p>Add a location with priority.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.priority_queue.PriorityQueue.get", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PriorityQueue.get", "kind": "function", "doc": "<p>Remove and return the highest priority location.</p>\n\n<p>NB this is the lowest <code>priority</code> value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.priority_queue.PrioritisedLocation", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PrioritisedLocation", "kind": "class", "doc": "<p>Wrapper for prioritised location.</p>\n\n<p>Avoids unintended prioritisation attempts on <code>location</code> itself.</p>\n"}, {"fullname": "two_d_game_ai.world.priority_queue.PrioritisedLocation.__init__", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PrioritisedLocation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">two_d_game_ai</span><span class=\"o\">.</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">grid_ref</span><span class=\"o\">.</span><span class=\"n\">GridRef</span></span>)</span>"}, {"fullname": "two_d_game_ai.world.priority_queue.PrioritisedLocation.priority", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PrioritisedLocation.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "two_d_game_ai.world.priority_queue.PrioritisedLocation.location", "modulename": "two_d_game_ai.world.priority_queue", "qualname": "PrioritisedLocation.location", "kind": "variable", "doc": "<p></p>\n", "annotation": ": two_d_game_ai.world.grid_ref.GridRef"}, {"fullname": "two_d_game_ai.world.world", "modulename": "two_d_game_ai.world.world", "kind": "module", "doc": "<p>Module containing <code>World</code> class.</p>\n"}, {"fullname": "two_d_game_ai.world.world.World", "modulename": "two_d_game_ai.world.world", "qualname": "World", "kind": "class", "doc": "<p>Simulated domain.</p>\n\n<p>Square.</p>\n\n<p>Has a <code>two_d_game_ai.world.grid.Grid</code>.</p>\n"}, {"fullname": "two_d_game_ai.world.world.World.__init__", "modulename": "two_d_game_ai.world.world", "qualname": "World.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">grid_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span>)</span>"}, {"fullname": "two_d_game_ai.world.world.World.size", "modulename": "two_d_game_ai.world.world", "qualname": "World.size", "kind": "variable", "doc": "<p><code>World</code> units per side.</p>\n"}, {"fullname": "two_d_game_ai.world.world.World.grid", "modulename": "two_d_game_ai.world.world", "qualname": "World.grid", "kind": "variable", "doc": "<p><code>Grid</code> instance.</p>\n"}, {"fullname": "two_d_game_ai.world.world.World.grid_resolution", "modulename": "two_d_game_ai.world.world", "qualname": "World.grid_resolution", "kind": "variable", "doc": "<p>Size of a <code>Grid</code> cell in <code>World</code> units.</p>\n"}, {"fullname": "two_d_game_ai.world.world.World.bots", "modulename": "two_d_game_ai.world.world", "qualname": "World.bots", "kind": "variable", "doc": "<p>All <code>Bot</code>s.</p>\n", "annotation": ": set[two_d_game_ai.entities.bot.Bot]"}, {"fullname": "two_d_game_ai.world.world.World.movement_blocks", "modulename": "two_d_game_ai.world.world", "qualname": "World.movement_blocks", "kind": "variable", "doc": "<p>All <code>MovementBlock</code>s.</p>\n", "annotation": ": list[two_d_game_ai.entities.movement_block.MovementBlock]"}, {"fullname": "two_d_game_ai.world.world.World.step_counter", "modulename": "two_d_game_ai.world.world", "qualname": "World.step_counter", "kind": "variable", "doc": "<p>Number of update steps taken.</p>\n", "annotation": ": int"}, {"fullname": "two_d_game_ai.world.world.World.is_paused", "modulename": "two_d_game_ai.world.world", "qualname": "World.is_paused", "kind": "variable", "doc": "<p>Whether the <code>World</code> is paused.</p>\n", "annotation": ": bool"}, {"fullname": "two_d_game_ai.world.world.World.update", "modulename": "two_d_game_ai.world.world", "qualname": "World.update", "kind": "function", "doc": "<p>Change all <code>Bot</code> positions over 1 simulation step.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.world.World.point_is_inside_world_bounds", "modulename": "two_d_game_ai.world.world", "qualname": "World.point_is_inside_world_bounds", "kind": "function", "doc": "<p>Return <code>True</code> if point is inside the World bounds, else <code>False</code>.</p>\n\n<p>Not currently used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "two_d_game_ai.world.world.World.route", "modulename": "two_d_game_ai.world.world", "qualname": "World.route", "kind": "function", "doc": "<p>Return route.</p>\n\n<p>Uses uniform cost search, a variation of Dijkstra's algorithm.\nDelegates to <code>Grid.route</code>.\nIntermediate points are cell centres.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[Vector2]</strong>: Points on the path, including <code>to_pos</code> itself.\nEmpty if no path found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span>,</span><span class=\"param\">\t<span class=\"n\">to_pos</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Vector2</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();